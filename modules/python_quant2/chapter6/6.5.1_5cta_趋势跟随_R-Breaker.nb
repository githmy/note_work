{
 "metadata": {
  "signature": "sha256:6f2449a12b617ecae06f6aa2bc94639686591df186ad2107911d815908ccab1d"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "id": "9879DBA4042B4BC488CE39F26579DA4F",
     "metadata": {},
     "source": [
      "**1.1 R-Breaker\u7b56\u7565**\n",
      "R-Breaker \u662f\u4e00\u79cd\u77ed\u7ebf\u65e5\u5185\u4ea4\u6613\u7b56\u7565\uff0c\u5b83\u7ed3\u5408\u4e86\u8d8b\u52bf\u548c\u53cd\u8f6c\u4e24\u79cd\u4ea4\u6613\u65b9\u5f0f\u3002\u8be5\u7b56\u7565\u4e5f\u957f\u671f\u88abFuture Thruth \u6742\u5fd7\u8bc4\u4e3a\u6700\u8d5a\u94b1\u7684\u7b56\u7565\u4e4b\u4e00\uff0c\u5c24\u5176\u5728\u6807\u666e500 \u80a1\u6307\u671f\u8d27\u4e0a\u6548\u679c\u6700\u4f73\u3002\u8be5\u7b56\u7565\u7684\u4e3b\u8981\u7279\u70b9\u5982\u4e0b\uff1a\n",
      "\n",
      "\u7b2c\u4e00\u3001\u6839\u636e\u524d\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u6536\u76d8\u4ef7\u3001\u6700\u9ad8\u4ef7\u548c\u6700\u4f4e\u4ef7\u6570\u636e\u901a\u8fc7\u4e00\u5b9a\u65b9\u5f0f\u8ba1\u7b97\u51fa\u516d\u4e2a\u4ef7\u4f4d\uff0c\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u4e3a\u7a81\u7834\u4e70\u5165\u4ef7\u3001\u89c2\u5bdf\u5356\u51fa\u4ef7\u3001\u53cd\u8f6c\u5356\u51fa\u4ef7\u3001\u53cd\u8f6c\u4e70\u5165\u4ef7\u3001\u89c2\u5bdf\u4e70\u5165\u4ef7\u548c\u7a81\u7834\u5356\u51fa\u4ef7\uff0c\u4ee5\u6b64\u6765\u5f62\u6210\u5f53\u524d\u4ea4\u6613\u65e5\u76d8\u4e2d\u4ea4\u6613\u7684\u89e6\u53d1\u6761\u4ef6\u3002\u901a\u8fc7\u5bf9\u8ba1\u7b97\u65b9\u5f0f\u7684\u8c03\u6574\uff0c\u53ef\u4ee5\u8c03\u8282\u516d\u4e2a\u4ef7\u683c\u95f4\u7684\u8ddd\u79bb\uff0c\u8fdb\u4e00\u6b65\u6539\u53d8\u89e6\u53d1\u6761\u4ef6\u3002\n",
      "\n",
      "\u7b2c\u4e8c\u3001\u6839\u636e\u76d8\u4e2d\u4ef7\u683c\u8d70\u52bf\uff0c\u5b9e\u65f6\u5224\u65ad\u89e6\u53d1\u6761\u4ef6\uff0c\u5177\u4f53\u6761\u4ef6\u5982\u4e0b\uff1a\n",
      "\t1) \u5f53\u65e5\u5185\u6700\u9ad8\u4ef7\u8d85\u8fc7\u89c2\u5bdf\u5356\u51fa\u4ef7\u540e\uff0c\u76d8\u4e2d\u4ef7\u683c\u51fa\u73b0\u56de\u843d\uff0c\u4e14\u8fdb\u4e00\u6b65\u8dcc\u7834\u53cd\u8f6c\u5356\u51fa\u4ef7\u6784\u6210\u7684\u652f\u6491\u7ebf\u65f6\uff0c\u91c7\u53d6\u53cd\u8f6c\u7b56\u7565\uff0c\u5373\u5728\u8be5\u70b9\u4f4d\uff08\u53cd\u624b\u3001\u5f00\u4ed3\uff09\u505a\u7a7a\uff1b\n",
      "\t2) \u5f53\u65e5\u5185\u6700\u4f4e\u4ef7\u4f4e\u4e8e\u89c2\u5bdf\u4e70\u5165\u4ef7\u540e\uff0c\u76d8\u4e2d\u4ef7\u683c\u51fa\u73b0\u53cd\u5f39\uff0c\u4e14\u8fdb\u4e00\u6b65\u8d85\u8fc7\u53cd\u8f6c\u4e70\u5165\u4ef7\u6784\u6210\u7684\u963b\u529b\u7ebf\u65f6\uff0c\u91c7\u53d6\u53cd\u8f6c\u7b56\u7565\uff0c\u5373\u5728\u8be5\u70b9\u4f4d\uff08\u53cd\u624b\u3001\u5f00\u4ed3\uff09\u505a\u591a\uff1b\n",
      "\t3) \u5728\u7a7a\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u76d8\u4e2d\u4ef7\u683c\u8d85\u8fc7\u7a81\u7834\u4e70\u5165\u4ef7\uff0c\u5219\u91c7\u53d6\u8d8b\u52bf\u7b56\u7565\uff0c\u5373\u5728\u8be5\u70b9\u4f4d\u5f00\u4ed3\u505a\u591a\uff1b\n",
      "\t4) \u5728\u7a7a\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u76d8\u4e2d\u4ef7\u683c\u8dcc\u7834\u7a81\u7834\u5356\u51fa\u4ef7\uff0c\u5219\u91c7\u53d6\u8d8b\u52bf\u7b56\u7565\uff0c\u5373\u5728\u8be5\u70b9\u4f4d\u5f00\u4ed3\u505a\u7a7a\u3002\n",
      "\n",
      "\u7b2c\u4e09\u3001\u8bbe\u5b9a\u6b62\u635f\u4ee5\u53ca\u6b62\u76c8\u6761\u4ef6\uff1b\n",
      "\n",
      "\u7b2c\u56db\u3001\u8bbe\u5b9a\u8fc7\u6ee4\u6761\u4ef6\uff1b\n",
      "\n",
      "\u7b2c\u4e94\u3001\u5728\u6bcf\u65e5\u6536\u76d8\u524d\uff0c\u5bf9\u6240\u6301\u5408\u7ea6\u8fdb\u884c\u5e73\u4ed3\u3002\n",
      "\n",
      "\u5177\u4f53\u6765\u770b\uff0c\u8fd9\u516d\u4e2a\u4ef7\u4f4d\u5f62\u6210\u7684\u963b\u529b\u548c\u652f\u6491\u4f4d\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b\uff1a\n",
      "* \u89c2\u5bdf\u5356\u51fa\u4ef7 = High + 0.35 \\* (Close \u2013 Low)\n",
      "* \u89c2\u5bdf\u4e70\u5165\u4ef7 = Low \u2013 0.35 \\* (High \u2013 Close)\n",
      "* \u53cd\u8f6c\u5356\u51fa\u4ef7 = 1.07 / 2 \\* (High + Low) \u2013 0.07 * Low\n",
      "* \u53cd\u8f6c\u4e70\u5165\u4ef7 = 1.07 / 2 \\* (High + Low) \u2013 0.07 * High\n",
      "* \u7a81\u7834\u4e70\u5165\u4ef7 = \u89c2\u5bdf\u5356\u51fa\u4ef7 + 0.25 * (\u89c2\u5bdf\u5356\u51fa\u4ef7 \u2013 \u89c2\u5bdf\u4e70\u5165\u4ef7)\n",
      "* \u7a81\u7834\u5356\u51fa\u4ef7 = \u89c2\u5bdf\u4e70\u5165\u4ef7 \u2013 0.25 * (\u89c2\u5bdf\u5356\u51fa\u4ef7 \u2013 \u89c2\u5bdf\u4e70\u5165\u4ef7)\n",
      "\n",
      "\u5176\u4e2d\uff0cHigh\u3001Close\u3001Low \u5206\u522b\u4e3a\u6628\u65e5\u6700\u9ad8\u4ef7\u3001\u6628\u65e5\u6536\u76d8\u4ef7\u548c\u6628\u65e5\u6700\u4f4e\u4ef7\u3002\u8fd9\u516d\u4e2a\u4ef7\u4f4d\u4ece\u5927\u5230\u5c0f\u4e00\u6b21\u662f\uff0c\u7a81\u7834\u4e70\u5165\u4ef7\u3001\u89c2\u5bdf\u7231\u51fa\u4ef7\u3001\u53cd\u8f6c\u5356\u51fa\u4ef7\u3001\u53cd\u8f6c\u4e70\u5165\u4ef7\u3001\u89c2\u5bdf\u4e70\u5165\u4ef7\u548c\u7a81\u7834\u5356\u51fa\u4ef7\u3002"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "B8A65F69AC374C739FFCBC481F099C81",
     "input": [
      "import DataAPI\n",
      "import numpy as np\n",
      "import pandas as pd\n",
      "import talib as ta\n",
      "from collections import deque\n",
      "from itertools import product\n",
      "import datetime\n",
      "import matplotlib\n",
      "import matplotlib.pyplot as plt\n",
      "import matplotlib.cm as cm\n",
      "import seaborn as sns\n",
      "from CAL import *\n",
      "cal = Calendar('China.SSE')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "strategy",
     "collapsed": false,
     "has_detail": true,
     "id": "72F731FD02A04C9C8E9B5596B74D3248",
     "input": "### \u7b56\u7565\u521d\u59cb\u5316\u51fd\u6570\nuniverse = ['RBM0']                # \u7b56\u7565\u4ea4\u6613\u7684\u671f\u8d27\u5408\u7ea6\uff0c\u6b64\u5904\u9009\u62e9IH1609\nstart = \"2010-01-05\"                 # \u56de\u6d4b\u5f00\u59cb\u65f6\u95f4\nend   = \"2010-12-31\"                 # \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4\ncapital_base = 1e6               # \u521d\u59cb\u53ef\u7528\u8d44\u91d1\nrefresh_rate = (1, 5)                     # \u7b97\u6cd5\u8c03\u7528\u5468\u671f\nfreq = 'm'                           # \u7b97\u6cd5\u8c03\u7528\u9891\u7387\uff1am-> \u5206\u949f\uff1bd-> \u65e5\uff1b\ncommission = {'RB': (0.000025, 'perValue')}\nslippage = Slippage(0, 'perValue')\namount = 20\naccounts = {\n    'futures_account': AccountConfig(account_type='futures', capital_base=capital_base, \n                                     commission=commission, slippage=slippage)\n}\ndef initialize(context):\n    context.pipe_length = 2\n    context.refresh_rate = refresh_rate[1]\n    context.keys = [u'openPrice', u'highPrice', u'lowPrice', u'closePrice', u'turnoverVol', u'tradeDate']\n    context.data = {key:deque([], maxlen=context.pipe_length) for key in context.keys}\n    context.high = np.NAN\n    context.low = np.NAN\n    context.close = np.NAN\n    context.count1 = 0\n    context.count2 = 0\ndef handle_data(context):\n    futures_account = context.get_account('futures_account')\n    symbol = context.get_symbol(universe[0])\n    long_position = futures_account.get_positions().get(symbol, dict()).get('long_amount', 0)\n    short_position = futures_account.get_positions().get(symbol, dict()).get('short_amount', 0)\n    if context.current_minute == '09:30':    \n        yester_data = DataAPI.MktFutdGet(tradeDate=context.previous_date, ticker=symbol, field=[u'closePrice', u'highestPrice',u'lowestPrice'], pandas=\"1\")\n        context.high = yester_data['highestPrice'].iat[0]\n        context.low = yester_data['lowestPrice'].iat[0]\n        context.close = yester_data['closePrice'].iat[0]\n        \n    if context.current_minute > '09:30' and context.current_minute < '14:55':\n        # =========================================\n        if len(context.data['openPrice']) < context.pipe_length:\n            hist = context.history(symbol=symbol, attribute=context.keys[:-1], time_range=context.refresh_rate*context.pipe_length, freq='1m')[symbol]\n        else:\n            hist = context.history(symbol=symbol, attribute=context.keys[:-1], time_range=context.refresh_rate, freq='1m')[symbol]\n        current_data = {key:[] for key in context.keys}\n        for i in range(len(hist)/context.refresh_rate):\n            current_bar = hist[context.refresh_rate*i:context.refresh_rate*(i+1)]\n            current_bar['tradeDate'] = [i[:10] for i in current_bar.index]\n            current_data['closePrice'].append(current_bar.ix[len(current_bar)-1, 'closePrice'])\n            current_data['openPrice'].append(current_bar.ix[0, 'openPrice'])\n            current_data['highPrice'].append(current_bar['highPrice'].max())\n            current_data['lowPrice'].append(current_bar['lowPrice'].min())\n            current_data['turnoverVol'].append(current_bar['turnoverVol'].sum())\n            current_data['tradeDate'].append(current_bar.ix[len(current_bar)-1, 'tradeDate'])\n        for i in context.keys:\n            for j in current_data[i]:\n                context.data[i].append(j) \n        # =====================================\n        data = context.data\n        before_2_close = data['closePrice'][-2]\n        before_2_high = data['highPrice'][-2]   \n        before_1_close = data['closePrice'][-1]\n        before_1_high = data['highPrice'][-1]\n        before_1_low = data['lowPrice'][-1]\n        before_1_open = data['openPrice'][-1]\n        # \u89c2\u5bdf\u5356\u51fa\u4ef7\n        ssetup=context.high+0.35*(context.close-context.low)\n        # \u89c2\u5bdf\u4e70\u5165\u4ef7\n        bsetup=context.low-0.35*(context.high-context.close)\n        # \u53cd\u8f6c\u5356\u51fa\u4ef7\n        senter=(1+0.07)/2*(context.high+context.low)-0.07*context.low\n        # \u53cd\u8f6c\u4e70\u5165\u4ef7\n        benter = (1+0.07)/2*(context.high+context.low)-0.07*context.high\n        # \u7a81\u7834\u4e70\u5165\u4ef7\n        bbreak = ssetup+0.25*(ssetup-bsetup)\n        # \u7a81\u7834\u5356\u51fa\u4ef7\n        sbreak = bsetup-0.25*(ssetup-bsetup)\n\n        ## \u8d8b\u52bf\n        if before_2_close <= bbreak and before_1_close > bbreak:\n            if long_position == 0:\n                futures_account.order(symbol, amount, 'open')\n            if short_position != 0:\n                futures_account.order(symbol, short_position, 'close')\n        if before_2_close >= sbreak and before_1_close < sbreak:\n            if short_position == 0:\n                futures_account.order(symbol, -amount, 'open')\n            if long_position != 0:\n                futures_account.order(symbol, -long_position, 'close')\n        ## \u53cd\u8f6c\n        ### \u591a\u5355\u53cd\u8f6c\n        if before_1_high > ssetup and before_1_close > senter:\n            context.count1 = 1\n        if context.count1 == 1 and before_1_close < senter:\n            if long_position > 0:\n                futures_account.order(symbol, -long_position, 'close')\n                futures_account.order(symbol, -amount, 'open')\n        ### \u7a7a\u5355\u53cd\u8f6c\n        if before_1_low < bsetup:\n            context.count2 = 1\n        if context.count2 == 1 and before_1_close > benter:\n            if short_position != 0:\n                futures_account.order(symbol, short_position, 'close')\n                futures_account.order(symbol, amount, 'open')   \n\n    elif context.current_minute >= '14:55':\n        if short_position > 0:\n            futures_account.order(symbol, short_position, 'close')\n        if long_position > 0:\n            futures_account.order(symbol, -long_position, 'close')\n        context.high = np.NAN\n        context.low = np.NAN\n        context.close = np.NAN\n        context.count1 = 0\n        context.count2 = 0",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 3,
       "text": "'{\"information\": 0.78251, \"benchmark_cumulative_return\": {\"1267488000000\": -0.0633593854, \"1290556800000\": -0.1013201404, \"1292544000000\": -0.0875671456, \"1271203200000\": -0.0372026714, \"1268611200000\": -0.0995833369, \"1277337600000\": -0.2199941729, \"1263859200000\": -0.00784956, \"1283126400000\": -0.1754397875, \"1280966400000\": -0.1935941933, \"1278460800000\": -0.2700672941, \"1282867200000\": -0.1914048025, \"1283731200000\": -0.1584451365, \"1293580800000\": -0.1339092506, \"1273190400000\": -0.1975656464, \"1279238400000\": -0.2599830846, \"1267660800000\": -0.0805209279, \"1268265600000\": -0.0731267838, \"1277769600000\": -0.2668030086, \"1290988800000\": -0.0976400404, \"1268956800000\": -0.0682727856, \"1288828800000\": -0.0154784837, \"1282262400000\": -0.1801580095, \"1276128000000\": -0.2221100183, \"1288051200000\": -0.0195602549, \"1273449600000\": -0.1915009773, \"1282176000000\": -0.1640147883, \"1285718400000\": -0.186811042, \"1289865600000\": -0.1034416431, \"1285027200000\": -0.1917131276, \"1276819200000\": -0.2373424077, \"1289952000000\": -0.1220062061, \"1293494400000\": -0.1386897034, \"1281052800000\": -0.1803475304, \"1277164800000\": -0.2125773995, \"1268092800000\": -0.06488121, \"1292371200000\": -0.0813497283, \"1262736000000\": 0.0018386357, \"1284681600000\": -0.1906127748, \"1281484800000\": -0.1937695709, \"1291680000000\": -0.0947293387, \"1290124800000\": -0.1008081511, \"1290384000000\": -0.1027627623, \"1265760000000\": -0.0908286024, \"1291248000000\": -0.1075375577, \"1274745600000\": -0.2040291579, \"1291161600000\": -0.1129233459, \"1271030400000\": -0.0519768162, \"1291075200000\": -0.1126489648, \"1280880000000\": -0.1863527974, \"1283385600000\": -0.1736350959, \"1262908800000\": -0.0155859732, \"1291593600000\": -0.1045646252, \"1265068800000\": -0.1100465882, \"1264982400000\": -0.1082022952, \"1274227200000\": -0.2186731839, \"1291334400000\": -0.1066606699, \"1265241600000\": -0.0895076134, \"1292198400000\": -0.0775536528, \"1274918400000\": -0.19100596, \"1269475200000\": -0.086585597, \"1279756800000\": -0.2132647664, \"1281657600000\": -0.1922590609, \"1280102400000\": -0.204843815, \"1279065600000\": -0.2493812284, \"1285632000000\": -0.1850855531, \"1280275200000\": -0.1899480373, \"1272240000000\": -0.1027457902, \"1271808000000\": -0.0844499509, \"1289174400000\": 0.0037734461, \"1292457600000\": -0.0861499818, \"1289520000000\": -0.0688498344, \"1293148800000\": -0.1053029082, \"1276214400000\": -0.2196066451, \"1291766400000\": -0.1027797343, \"1278892800000\": -0.2429856049, \"1265328000000\": -0.1080948057, \"1276041600000\": -0.2130271581, \"1275436800000\": -0.2199856869, \"1286928000000\": -0.0898527111, \"1281916800000\": -0.1734399176, \"1272412800000\": -0.1238618138, \"1270166400000\": -0.0361730354, \"1265932800000\": -0.0803200923, \"1262822400000\": -0.0180384303, \"1269993600000\": -0.0536372457, \"1287360000000\": -0.0647963499, \"1280448000000\": -0.1884969295, \"1289433600000\": -0.0071423924, \"1293062400000\": -0.0980473689, \"1268179200000\": -0.0722838401, \"1263168000000\": -0.0150428685, \"1282003200000\": -0.167723175, \"1282694400000\": -0.1958033848, \"1266883200000\": -0.0952130413, \"1287964800000\": -0.0153172495, \"1293753600000\": -0.115118394, \"1278028800000\": -0.2831838381, \"1271116800000\": -0.0405942471, \"1278633600000\": -0.2512226927, \"1286496000000\": -0.1388877103, \"1285545600000\": -0.1782628004, \"1280793600000\": -0.1893115865, \"1266796800000\": -0.0853918981, \"1285804800000\": -0.1696240414, \"1274140800000\": -0.2160764646, \"1270771200000\": -0.0441442282, \"1274659200000\": -0.1871900838, \"1289779200000\": -0.0623269207, \"1279152000000\": -0.2621357026, \"1277683200000\": -0.2315125183, \"1264550400000\": -0.0952300133, \"1264032000000\": -0.0358279376, \"1270080000000\": -0.0405320163, \"1265846400000\": -0.0890550261, \"1275264000000\": -0.2155361886, \"1284940800000\": -0.1938770603, \"1291852800000\": -0.1165016138, \"1264723200000\": -0.0936487866, \"1278979200000\": -0.2547613592, \"1284422400000\": -0.1612964362, \"1293667200000\": -0.1332671424, \"1267056000000\": -0.0687649743, \"1277078400000\": -0.2134429726, \"1283817600000\": -0.156176543, \"1271894400000\": -0.0943898983, \"1274054400000\": -0.2320952244, \"1288742400000\": -0.0324985927, \"1273536000000\": -0.2077403733, \"1270598400000\": -0.0419435228, \"1268006400000\": -0.0704480331, \"1287532800000\": -0.0391346532, \"1287100800000\": -0.0587090515, \"1263254400000\": -8.76888e-05, \"1288224000000\": -0.0389055309, \"1277942400000\": -0.285458089, \"1283990400000\": -0.1722009601, \"1292284800000\": -0.0751747411, \"1288915200000\": -0.0040817712, \"1273708800000\": -0.183388351, \"1271635200000\": -0.101495518, \"1269907200000\": -0.0476687514, \"1265587200000\": -0.1086888265, \"1268784000000\": -0.0739159828, \"1281571200000\": -0.2033361337, \"1263945600000\": -0.0398276774, \"1277251200000\": -0.2197113059, \"1288569600000\": -0.0176028151, \"1287619200000\": -0.0454114725, \"1268870400000\": -0.0757150171, \"1273622400000\": -0.2028354591, \"1278374400000\": -0.2750400964, \"1279843200000\": -0.2099297641, \"1264118400000\": -0.0478130136, \"1280361600000\": -0.1859143535, \"1290729600000\": -0.0962822787, \"1271376000000\": -0.0506049111, \"1287446400000\": -0.0451342628, \"1267142400000\": -0.0717237634, \"1287014400000\": -0.0879971034, \"1275523200000\": -0.2260531847, \"1272499200000\": -0.1344099252, \"1290643200000\": -0.0881837957, \"1289260800000\": -0.0031907401, \"1284508800000\": -0.1759546055, \"1274400000000\": -0.2168006042, \"1292976000000\": -0.0904552179, \"1272326400000\": -0.1207333045, \"1291939200000\": -0.1055801178, \"1279584000000\": -0.2245200454, \"1263772800000\": -0.0097730558, \"1263427200000\": -0.0187201398, \"1269302400000\": -0.0734492522, \"1267574400000\": -0.0566158355, \"1281312000000\": -0.174526127, \"1270684800000\": -0.0533176059, \"1277856000000\": -0.274992009, \"1265155200000\": -0.0861358384, \"1286841600000\": -0.1025392973, \"1283904000000\": -0.1567818784, \"1269561600000\": -0.0736104864, \"1293408000000\": -0.1231942476, \"1275004800000\": -0.1937441128, \"1262649600000\": 0.008149399, \"1283299200000\": -0.1842001793, \"1290470400000\": -0.1210812309, \"1288656000000\": -0.0203947126, \"1274313600000\": -0.228898827, \"1278288000000\": -0.2892541645, \"1272585600000\": -0.1323421673, \"1263513600000\": -0.0148476902, \"1287705600000\": -0.0442884904, \"1284595200000\": -0.1916254388, \"1284076800000\": -0.1704782999, \"1263340800000\": -0.0322722991, \"1275955200000\": -0.2364457192, \"1269216000000\": -0.0657948705, \"1264377600000\": -0.0586157053, \"1284336000000\": -0.1620573485, \"1264636800000\": -0.0929670771, \"1275868800000\": -0.2374696979, \"1279497600000\": -0.241217686, \"1280707200000\": -0.1747976794, \"1267747200000\": -0.0779213799, \"1282521600000\": -0.180763345, \"1279670400000\": -0.2228681019, \"1277424000000\": -0.2259937826, \"1280188800000\": -0.2091829952, \"1270512000000\": -0.0367953429, \"1275609600000\": -0.2237025597, \"1282608000000\": -0.1763393047, \"1267401600000\": -0.059631198, \"1286755200000\": -0.113805891, \"1269388800000\": -0.0731380985, \"1290038400000\": -0.1095459136, \"1271289600000\": -0.039788076, \"1276732800000\": -0.2241721189, \"1271980800000\": -0.0976541837, \"1289347200000\": -0.010217157, \"1271721600000\": -0.1023582624, \"1273104000000\": -0.1805738241, \"1283212800000\": -0.1787832758, \"1278547200000\": -0.2713571677, \"1273795200000\": -0.1887317091, \"1274832000000\": -0.2040291579, \"1282089600000\": -0.1691177095, \"1292803200000\": -0.1008618958, \"1268352000000\": -0.0854541289, \"1268697600000\": -0.0937025314, \"1273017600000\": -0.1411053878, \"1266969600000\": -0.0822435881, \"1283472000000\": -0.173968879, \"1272931200000\": -0.1458971552, \"1269820800000\": -0.049979775, \"1288310400000\": -0.0439151059, \"1282780800000\": -0.1938035149, \"1292889600000\": -0.080820767, \"1288137600000\": -0.0371574127, \"1281398400000\": -0.1987395445, \"1265673600000\": -0.1035406466, \"1264464000000\": -0.0827188047, \"1275350400000\": -0.2237676191}, \"benchmark_annualized_return\": -0.11915, \"turnover_rate\": 0.0, \"max_drawdown\": 0.02495, \"beta\": -0.01009, \"sharpe\": 1.49879, \"alpha\": 0.07458, \"volatility\": 0.0508, \"annualized_return\": 0.11113, \"cumulative_return\": {\"1267488000000\": 0.01108346, \"1290556800000\": 0.13190853, \"1292544000000\": 0.133966805, \"1271203200000\": 0.012601925, \"1268611200000\": 0.01104178, \"1277337600000\": 0.06578559, \"1263859200000\": -0.00577889, \"1283126400000\": 0.084430935, \"1280966400000\": 0.07217771, \"1278460800000\": 0.06166587, \"1282867200000\": 0.076874045, \"1283731200000\": 0.095141845, \"1293580800000\": 0.106927265, \"1273190400000\": 0.032320835, \"1279238400000\": 0.06158731, \"1267660800000\": 0.01108346, \"1268265600000\": 0.01104178, \"1277769600000\": 0.07054515, \"1290988800000\": 0.132462135, \"1268956800000\": 0.02499427, \"1288828800000\": 0.118388545, \"1282262400000\": 0.075316715, \"1276128000000\": 0.064468315, \"1288051200000\": 0.115634015, \"1273449600000\": 0.032320835, \"1282176000000\": 0.07395987, \"1285718400000\": 0.1011222, \"1289865600000\": 0.13524683, \"1285027200000\": 0.1011222, \"1276819200000\": 0.062827185, \"1289952000000\": 0.132201425, \"1293494400000\": 0.10837498, \"1281052800000\": 0.07217771, \"1277164800000\": 0.06578559, \"1268092800000\": 0.01104178, \"1292371200000\": 0.133966805, \"1262736000000\": -0.001446215, \"1284681600000\": 0.107009315, \"1281484800000\": 0.071046585, \"1291680000000\": 0.130414495, \"1290124800000\": 0.132201425, \"1290384000000\": 0.132201425, \"1265760000000\": 0.007768295, \"1291248000000\": 0.132462135, \"1274745600000\": 0.05519144, \"1291161600000\": 0.132462135, \"1271030400000\": 0.012601925, \"1291075200000\": 0.132462135, \"1280880000000\": 0.07217771, \"1283385600000\": 0.081987365, \"1262908800000\": -0.01449083, \"1291593600000\": 0.132462135, \"1265068800000\": 0.010693175, \"1264982400000\": -0.00186503, \"1274227200000\": 0.0552344, \"1291334400000\": 0.132462135, \"1265241600000\": 0.009452025, \"1292198400000\": 0.133966805, \"1274918400000\": 0.05519144, \"1269475200000\": 0.01734642, \"1279756800000\": 0.066547775, \"1281657600000\": 0.0736035, \"1280102400000\": 0.066905555, \"1279065600000\": 0.06158731, \"1285632000000\": 0.1011222, \"1280275200000\": 0.0706639, \"1272240000000\": 0.01870606, \"1271808000000\": 0.01870606, \"1289174400000\": 0.11454144, \"1292457600000\": 0.133966805, \"1289520000000\": 0.13524683, \"1293148800000\": 0.10837498, \"1276214400000\": 0.062827185, \"1291766400000\": 0.130414495, \"1278892800000\": 0.06122649, \"1265328000000\": 0.009452025, \"1276041600000\": 0.064468315, \"1275436800000\": 0.056949625, \"1286928000000\": 0.103278765, \"1281916800000\": 0.07395987, \"1272412800000\": 0.029213095, \"1270166400000\": 0.00889823, \"1265932800000\": 0.011725515, \"1262822400000\": -0.01449083, \"1269993600000\": 0.00889823, \"1287360000000\": 0.103278765, \"1280448000000\": 0.072021125, \"1289433600000\": 0.127093275, \"1293062400000\": 0.10837498, \"1268179200000\": 0.01104178, \"1263168000000\": -0.01449083, \"1282003200000\": 0.07395987, \"1282694400000\": 0.076874045, \"1266883200000\": 0.011725515, \"1287964800000\": 0.115634015, \"1293753600000\": 0.106927265, \"1278028800000\": 0.06166587, \"1271116800000\": 0.012601925, \"1278633600000\": 0.06122649, \"1286496000000\": 0.1011222, \"1285545600000\": 0.1011222, \"1280793600000\": 0.07217771, \"1266796800000\": 0.011725515, \"1285804800000\": 0.1011222, \"1274140800000\": 0.0552344, \"1270771200000\": 0.012601925, \"1274659200000\": 0.05519144, \"1289779200000\": 0.13524683, \"1279152000000\": 0.06158731, \"1277683200000\": 0.07054515, \"1264550400000\": -0.00186503, \"1264032000000\": -0.00577889, \"1270080000000\": 0.00889823, \"1265846400000\": 0.007768295, \"1275264000000\": 0.05519144, \"1284940800000\": 0.100565385, \"1291852800000\": 0.130414495, \"1264723200000\": -0.00186503, \"1278979200000\": 0.06158731, \"1284422400000\": 0.10325304, \"1293667200000\": 0.106927265, \"1267056000000\": 0.01108346, \"1277078400000\": 0.06578559, \"1283817600000\": 0.095141845, \"1271894400000\": 0.01870606, \"1274054400000\": 0.0552344, \"1288742400000\": 0.118388545, \"1273536000000\": 0.032320835, \"1270598400000\": 0.011050045, \"1268006400000\": 0.01104178, \"1287532800000\": 0.103278765, \"1287100800000\": 0.103278765, \"1263254400000\": -0.01449083, \"1288224000000\": 0.115634015, \"1277942400000\": 0.07054515, \"1283990400000\": 0.10169722, \"1292284800000\": 0.133966805, \"1288915200000\": 0.11454144, \"1273708800000\": 0.036276675, \"1271635200000\": 0.01870606, \"1269907200000\": 0.00889823, \"1265587200000\": 0.009452025, \"1268784000000\": 0.02499427, \"1281571200000\": 0.0736035, \"1263945600000\": -0.00577889, \"1277251200000\": 0.06578559, \"1288569600000\": 0.118388545, \"1287619200000\": 0.103278765, \"1268870400000\": 0.02499427, \"1273622400000\": 0.036276675, \"1278374400000\": 0.06166587, \"1279843200000\": 0.066905555, \"1264118400000\": -0.00222188, \"1280361600000\": 0.0706639, \"1290729600000\": 0.132462135, \"1271376000000\": 0.012553725, \"1287446400000\": 0.103278765, \"1267142400000\": 0.01108346, \"1287014400000\": 0.103278765, \"1275523200000\": 0.056949625, \"1272499200000\": 0.029213095, \"1290643200000\": 0.13190853, \"1289260800000\": 0.127093275, \"1284508800000\": 0.10325304, \"1274400000000\": 0.0552344, \"1292976000000\": 0.10837498, \"1272326400000\": 0.021659185, \"1291939200000\": 0.130414495, \"1279584000000\": 0.066547775, \"1263772800000\": -0.00577889, \"1263427200000\": -0.01253507, \"1269302400000\": 0.01734642, \"1267574400000\": 0.01108346, \"1281312000000\": 0.075934025, \"1270684800000\": 0.012601925, \"1277856000000\": 0.07054515, \"1265155200000\": 0.010693175, \"1286841600000\": 0.103278765, \"1283904000000\": 0.095141845, \"1269561600000\": 0.00889823, \"1293408000000\": 0.10837498, \"1275004800000\": 0.05519144, \"1262649600000\": 0.0, \"1283299200000\": 0.081987365, \"1290470400000\": 0.1291554, \"1288656000000\": 0.118388545, \"1274313600000\": 0.0552344, \"1278288000000\": 0.06166587, \"1272585600000\": 0.029213095, \"1263513600000\": -0.00577889, \"1287705600000\": 0.103278765, \"1284595200000\": 0.107009315, \"1284076800000\": 0.10169722, \"1263340800000\": -0.01253507, \"1275955200000\": 0.062909305, \"1269216000000\": 0.01734642, \"1264377600000\": -0.00222188, \"1284336000000\": 0.10169722, \"1264636800000\": -0.00186503, \"1275868800000\": 0.062909305, \"1279497600000\": 0.066547775, \"1280707200000\": 0.07217771, \"1267747200000\": 0.01104178, \"1282521600000\": 0.076874045, \"1279670400000\": 0.066547775, \"1277424000000\": 0.06578559, \"1280188800000\": 0.0706639, \"1270512000000\": 0.011050045, \"1275609600000\": 0.056949625, \"1282608000000\": 0.076874045, \"1267401600000\": 0.01108346, \"1286755200000\": 0.103278765, \"1269388800000\": 0.01734642, \"1290038400000\": 0.132201425, \"1271289600000\": 0.012553725, \"1276732800000\": 0.062827185, \"1271980800000\": 0.01870606, \"1289347200000\": 0.127093275, \"1271721600000\": 0.01870606, \"1273104000000\": 0.027966405, \"1283212800000\": 0.084430935, \"1278547200000\": 0.06122649, \"1273795200000\": 0.036276675, \"1274832000000\": 0.05519144, \"1282089600000\": 0.07395987, \"1292803200000\": 0.109822895, \"1268352000000\": 0.01104178, \"1268697600000\": 0.02499427, \"1273017600000\": 0.027966405, \"1266969600000\": 0.011725515, \"1283472000000\": 0.081987365, \"1272931200000\": 0.027966405, \"1269820800000\": 0.00889823, \"1288310400000\": 0.115634015, \"1282780800000\": 0.076874045, \"1292889600000\": 0.109822895, \"1288137600000\": 0.115634015, \"1281398400000\": 0.075934025, \"1265673600000\": 0.0088104, \"1264464000000\": -0.00222188, \"1275350400000\": 0.056949625}}'"
      }
     ],
     "trading_days": ""
    }
   ],
   "metadata": {}
  }
 ]
}